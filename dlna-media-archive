#!/usr/bin/perl
# Copyright (C) 2005 by Satoshi Konno
# Copyright (C) 2014 Graham R. Cobb
# Released under GPL V2 -- see LICENSE
# Most of this code is taken from the documentation for Net::UPnP::AV::MediaServer -- see http://search.cpan.org/~skonno/Net-UPnP-1.4/lib/Net/UPnP/AV/MediaServer.pm

use strict;
use warnings;

use Net::UPnP::ControlPoint;
use Net::UPnP::AV::MediaServer;
use File::Spec;
use File::Path qw(make_path);
use HTTP::Tiny;

my $obj = Net::UPnP::ControlPoint->new();

my @dev_list = $obj->search(st =>'upnp:rootdevice', mx => 3);

foreach my $dev (@dev_list) {
    my $device_type = $dev->getdevicetype();
    if  ($device_type ne 'urn:schemas-upnp-org:device:MediaServer:1') {
	next;
    }
    unless ($dev->getservicebyname('urn:schemas-upnp-org:service:ContentDirectory:1')) {
	next;
    }
    
    my $mediaServer = Net::UPnP::AV::MediaServer->new();
    $mediaServer->setdevice($dev);

    my $topDir = File::Spec->catdir(File::Spec->curdir(), $dev->getfriendlyname());
    walk_tree($mediaServer, 0, $topDir);
}

sub walk_tree {
    my ($mediaServer, $id, $dir) = @_;

    my @content_list = $mediaServer->getcontentlist(ObjectID => $id );

    foreach my $content (@content_list) {
	if ($content->isitem()) {
	    archive_content($mediaServer, $dir, $content);
	} else {
	    walk_tree($mediaServer, $content->getid(), File::Spec->catdir($dir, $content->gettitle()));
	}	    
    }
}    

sub archive_content {
    my ($mediaServer, $dir, $content) = @_;

    make_path($dir) unless -d $dir;

    my $url = $content->geturl();
    my $file = File::Spec->catfile($dir, $content->gettitle());

    # HTTP::Tiny::mirror handles safe mirroring (redownload if incomplete or if file has changed).
    # Unfortunately, the Media Server does not necessarily handle the If-Modified-Since header
    # so we just do not download if the file already exists. This is safe as HTTP::Tiny::mirror
    # will not have renamed the download to the specified name unless the download was successful.
    if (! -e $file) {
	print "$url => $file\n";
	my $http = HTTP::Tiny->new();
	my $resp = $http->mirror($url, $file);
	unless ($resp->{success}) {die "Download of $url failed: ", $resp->{status}, $resp->{reason};}
    }
}
