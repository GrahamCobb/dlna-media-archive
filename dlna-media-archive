#!/usr/bin/perl
# Copyright (C) 2005 by Satoshi Konno
# Copyright (C) 2014, 2015 Graham R. Cobb
# Released under GPL V2 -- see LICENSE
# Much of this code is taken from the documentation for Net::UPnP::AV::MediaServer -- see http://search.cpan.org/~skonno/Net-UPnP-1.4/lib/Net/UPnP/AV/MediaServer.pm

use strict;
use warnings;

use Getopt::Long 2.33 qw(:config gnu_getopt auto_help auto_version);
use Pod::Usage;
use Net::UPnP::ControlPoint;
use Net::UPnP::AV::MediaServer;
use File::Find;
use File::Spec;
use File::Path qw(make_path remove_tree);
use HTTP::Tiny;
use Text::Glob qw( match_glob glob_to_regex );

our $VERSION = 0.4;

my $verbosity = 2;
my $man = 0;
my $topDir = "";
my $delete = 0;
my $flat = 0;
my $dryRun = 0;

#
# Logging
#
sub msgError
{
    print @_,"\n";
}
sub msgInfo
{
    print @_,"\n" if $verbosity >= 1;
}
sub msgProgress
{
    print @_,"\n" if $verbosity >= 2;
}
sub msgDebug
{
    print @_,"\n" if $verbosity >= 3;
}

#
# Option processing
#
#Getopt::Long::Configure ("bundling");
GetOptions(
	   "flat|f" => \$flat,
	   "delete|D" => \$delete,
	   "destination|d=s" => \$topDir,
	   "dry-run|n" => \$dryRun,
	   "verbose|v:+" => \$verbosity,
	   "man" => \$man,
	   ) or pod2usage(2);
msgDebug "man = $man";
if ($man) {
    pod2usage(-verbose => 2);
    exit;
}

my ($serverName) = @ARGV;
my $dryRunText = $dryRun ? "(dry run) " : "";

msgDebug "verbosity = $verbosity";
msgDebug "serverName = $serverName" if $serverName;
msgDebug "topDir = $topDir";
msgDebug "delete = $delete";
msgDebug "flat = $flat";
msgDebug "dryRun = $dryRun";
msgDebug "dryRunText = $dryRunText";

=head1 NAME

dlna-media-archive - Archive material from DLNA media servers

=head1 SYNOPSIS

dlna-media-archive [options] [<server-name>]

dlna-media-archive -?|--help|--man|--version

 Commands:

  -?, --help			brief help message
  --man 			full documentation
  --version			script version

 Options:

  -D, --delete			Delete files in destination tree not found on server
  -d, --destination=<path>	Destination directory for creating archive tree
  -n, --dry-run			Do not actually download content or delete files, just print messages
  -f, --flat			Store all files in one directory, not hierarchically
  -v, --verbose[=N]		Increment or set verbosity level (0 - quiet, 1 - info, 2 - progress, 3 - debug)

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<dlna-media-archive> downloads all the content from all the DLNA media servers
it can see.

B<server-name> specifies the name of the server (as advertised by the server).
File glob style wildcards can be included.

=head1 EXAMPLES

=over 8

=item B<dlna-media-archive "HDR-2000T*">

Downloads all content from all Humax HDR-2000T servers.

=item B<dlna-media-archive "HDR-2000T*" --delete --flat --destination /nas/my-PVR/>

Maintains mirror of all content from an Humax HDR-2000T server in a single directory.
Note that using --delete --flat together only works correctly if only a single server
matches the wildcard.

=back

=cut



my $obj = Net::UPnP::ControlPoint->new();

my @dev_list = $obj->search(st =>'upnp:rootdevice', mx => 3);

my $servers = 0;
foreach my $dev (@dev_list) {
    my $device_type = $dev->getdevicetype();
    if  ($device_type ne 'urn:schemas-upnp-org:device:MediaServer:1') {
	next;
    }
    unless ($dev->getservicebyname('urn:schemas-upnp-org:service:ContentDirectory:1')) {
	next;
    }
    if ($serverName) {
	if (! match_glob($serverName, $dev->getfriendlyname())) {
	    next;
	}
    } else {
	msgInfo "${dryRunText}Archiving server ", $dev->getfriendlyname(), "...";
    }
    
    $servers++;

    my $mediaServer = Net::UPnP::AV::MediaServer->new();
    $mediaServer->setdevice($dev);

    my $dir = $topDir || File::Spec->curdir();
    $dir = File::Spec->catdir($dir, $dev->getfriendlyname()) unless $flat;
    my @file_list = walk_tree($mediaServer, 0, $dir);
    remove_files($dir, @file_list) if $delete;
}

if (!$servers) {
    if ($serverName) {
	msgError "No servers found matching $serverName";
    } else {
	msgError "No servers found";
    }
    exit 1;
}

sub walk_tree {
    my ($mediaServer, $id, $dir) = @_;

    my @file_list = ();
    my @content_list = $mediaServer->getcontentlist(ObjectID => $id );

    foreach my $content (@content_list) {
	if ($content->isitem()) {
	    archive_content($mediaServer, $dir, $content);
	    push @file_list, File::Spec->catdir($dir, $content->gettitle());
	} else {
	    push @file_list, walk_tree($mediaServer,
				       $content->getid(), 
				       ($flat ? $dir : File::Spec->catdir($dir, $content->gettitle()))
		);
	    push @file_list, File::Spec->catdir($dir, $content->gettitle()) unless $flat;
	}	    
    }

    return @file_list;
}    

sub archive_content {
    my ($mediaServer, $dir, $content) = @_;

    make_path($dir) unless -d $dir;

    my $url = $content->geturl();
    my $file = File::Spec->catfile($dir, $content->gettitle());
    msgDebug "($url => $file)";

    # HTTP::Tiny::mirror handles safe mirroring (redownload if incomplete or if file has changed).
    # Unfortunately, the Media Server does not necessarily handle the If-Modified-Since header
    # so we just do not download if the file already exists. This is safe as HTTP::Tiny::mirror
    # will not have renamed the download to the specified name unless the download was successful.
    unless (-e $file) {
	msgProgress "${dryRunText}$url => $file";
	unless ($dryRun) {
	    my $http = HTTP::Tiny->new();
	    my $resp = $http->mirror($url, $file);
	    $resp->{success} || die "Download of $url failed: ", $resp->{status}, " ", $resp->{reason};
	}
    }
}

sub remove_files {
    my ($dir, @files_list) = @_;
    msgDebug "remove_files $dir";

    # Create a hash to make checks faster
    my %files = map {$_ =>1} @files_list;

    # Delete all the files in $dir that have not been handled
    finddepth(
	sub {
	    return if $_ eq ".";
	    return if $_ eq "..";
	    return if $files{$File::Find::name};
	    if (-d $File::Find::name) {
		msgProgress "${dryRunText}Deleting directory $File::Find::name...";
		rmdir $File::Find::name or warn "Could not delete directory $File::Find::name: $!" unless $dryRun;
	    } else {
		msgProgress "${dryRunText}Deleting file $File::Find::name...";
		unlink $File::Find::name or warn "Could not delete file $File::Find::name: $!" unless $dryRun;
	    }
	},
	$dir);
}
