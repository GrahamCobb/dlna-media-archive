#!/usr/bin/perl
# Copyright (C) 2005 by Satoshi Konno
# Copyright (C) 2018 Graham R. Cobb
# Released under GPL V2 -- see LICENSE
# Most of this code is taken from the documentation for Net::UPnP::AV::MediaServer -- see http://search.cpan.org/~skonno/Net-UPnP-1.4/lib/Net/UPnP/AV/MediaServer.pm

use strict;
use warnings;

use Getopt::Long 2.33 qw(:config gnu_getopt auto_help auto_version);
use Pod::Usage;
use Net::UPnP::ControlPoint;
use Net::UPnP::AV::MediaServer;
use Text::Glob qw( match_glob glob_to_regex );
use DateTime;
use JSON;

our $VERSION = 0.4;

my $verbosity = 2;
my $man = 0;
my $dryRun = 0;
my $execute;
my $output;
my $outputfh;
my $playlist = 0;
my $extendedPlaylist = 0;
my $listObjId;
my $saving = 0;
my $defaultSaveFile = ".dlna-playlist-play.save";
my $saveFile;
my $saveFileName;
my $resuming = 0;
my $resumeFile;
my $resumeAt;
my $logFile;
my $logfh;
my $logging = 0;

#
# Logging
#
sub msgError
{
    print @_,"\n";
}
sub msgInfo
{
    print @_,"\n" if $verbosity >= 1;
}
sub msgProgress
{
    print @_,"\n" if $verbosity >= 2;
}
sub msgDebug
{
    print @_,"\n" if $verbosity >= 3;
}
# Autoflush output, otherwise errors appear in wrong place relative to logging
$| = 1;

#
# Option processing
#
#Getopt::Long::Configure ("bundling");
GetOptions(
    "execute|e=s" => \$execute,
    "log|L=s" => \$logFile,
    "output|o=s" => \$output,
    "playlist|p" => \$playlist,
    "extended-playlist|P" => \$extendedPlaylist,
    "save|S:s" => \$saveFile,
    "resume|R:s" => \$resumeFile,
	   "dry-run|n" => \$dryRun,
	   "verbose|v:+" => \$verbosity,
	   "man" => \$man,
	   ) or pod2usage(2);
msgDebug "man = $man";
if ($man) {
    pod2usage(-verbose => 2);
    exit;
}
if ($execute && ($playlist || $extendedPlaylist)) {
    msgError "Cannot specify --execute and --playlist or --extended-playlist";
    pod2usage(-verbose => 2);
    exit;
}

$execute = $execute || "mplayer" unless $playlist || $extendedPlaylist;

if ($output) {
    open($outputfh, "> :encoding(UTF-8)", $output)
	|| die "$0: can't open $output: $!" unless $dryRun;
}

# Note: read resume data before creating save file as they use the same file
if (defined($resumeFile)) {
    # Filename may have been specified or we use the default
    my $resumeFileName = $resumeFile || $defaultSaveFile;
    open(my $resumefh, "< :encoding(UTF-8)", $resumeFileName)
	|| die "$0: can't open resume file $resumeFileName: $!";
    $resumeAt = readline($resumefh);
    close($resumefh);
    $resuming = 1;
    unless (length $resumeAt) {
	msgInfo "Resume cancelled as the previous playback finished or never started";
	$resuming = 0;
    }
}

if (defined($saveFile)) {
    # Filename may have been specified or we use the default
    $saveFileName = $saveFile || $defaultSaveFile;
    $saving = 1;
}

if (defined($logFile)) {
    open($logfh, "> :encoding(UTF-8)", $logFile)
	|| die "$0: can't open log file $logFile: $!";
    $logging = 1;
}

my ($serverName, $listName) = @ARGV;
if ($listName =~ /[0-9]+/) {$listObjId = $listName;}
my $dryRunText = $dryRun ? "(dry run) " : "";
$Net::UPnP::DEBUG=1 if $verbosity >= 3;

msgDebug "serverName = $serverName" if $serverName;
msgDebug "listName = $listName" if $listName;
msgDebug "listObjId = $listObjId" if $listObjId;
msgDebug "execute = $execute" if $execute;
msgDebug "playlist = $playlist";
msgDebug "extendedPlaylist = $extendedPlaylist";
msgDebug "output = $output" if $output;
msgDebug "verbosity = $verbosity";
msgDebug "serverName = $serverName" if $serverName;
msgDebug "dryRun = $dryRun";
msgDebug "dryRunText = $dryRunText";
msgDebug "resuming = $resuming";
msgDebug "resumeAt = $resumeAt" if $resuming;
msgDebug "saving = $saving";
msgDebug "saveFile = $saveFile" if $saving;

=head1 NAME

dlna-playlist-play - Play a simple playlist from a DLNA server, keeping track of where we are and
resuming later.

=head1 SYNOPSIS

dlna-playlist-play [options] <server-name> <object-id>|<list-name>|<list-path>

dlna-playlist-play -?|--help|--man|--version

 Commands:

  -?, --help			brief help message
  --man 			full documentation
  --version			script version

 Options:

  -e, --execute <command>       Command to execute. The URL for the content will be provided as the only argument.
  -L, --log <log-file>          Log which tracks were played when.
  -n, --dry-run			Do not actually play files or create playlist, just print messages
  -o, --output <file>           Do not execute commands, write the commands (or playlist) to the named file
  -p, --playlist                Do not issue commands, just write the URLs as playlist.
  -P, --extended-playlist       Do not issue commands, write the URLs as an extended playlist.
  -R, --resume[=<file>]         Restart playing with the item interrupted last time.
  -S, --save[=<file>]           Save the id of the object being played to allow resume next time.
  -v, --verbose[=N]		Increment or set verbosity level (0 - quiet, 1 - info, 2 - progress, 3 - debug)

=head1 OPTIONS

=over 8

=item B<--dry-run>

Do not actually play files or create a playlist. The tree will be walked and progress messages issued.

=item B<--execute>

Specify the command to execute to play the content. The URL for the content will be provided as the only argument.

It is an error to specify either B<--playlist> or B<--extended-playlist> with B<--execute>. If none of B<--execute>, B<--playlist> or B<--extended-playlist> are specified then the default
action is B<--execute mplayer>.

=item B<--help>

Print a brief help message and exits.

=item B<--log>

Log a record of the date/time of each track played to the specified file.

=item B<--man>

Prints the manual page and exits.

=item B<--output>

Instead of executing commands, they are written to the named file. 

This is also used to specify the output file for playlist generation. If not specified, the playlist will be output
to stdout, along with any progress messages.

=item B<--playlist>

Do not issue commands, but generate a playlist with the URLs of the content.

The output file for the playlist should be specified using B<--output>.

It is an error to specify both B<--playlist> and B<--execute>.

=item B<--extended-playlist>

Do not issue commands, but generate an extended playlist with the URLs of the content.
A I<dlna-playlist-play extended playlist> adds additional information to the playlist
to record information about the content object.
This consists of lines prefixed with B<#DPPEP-Item:> and then containing JSON information.
The information provided is intended to be enough to allow I<dlna-playlist-play> to later play the
content without using UPNP but with all features, such as save and resume, working.

The output file for the playlist should be specified using B<--output>.

It is an error to specify both B<--extended-playlist> and B<--execute>.

=item B<--save>

Save the object ID of the track currently being played in a file, for use with B<--resume>.
The save file defaults to I<.dlna-playlist-play.save> in the current directory.

When playback completes, the save file is deleted.

=item B<--resume>

Read the specified save file and resume playback with the specified object ID.
The save file defaults to I<.dlna-playlist-play.save> in the current directory.
If the object ID is not found, an error is reported.

=back

=head1 DESCRIPTION

B<dlna-playlist-play> plays content files from DLNA UPNP AV media servers. It is designed to play containers such as playlists or albums.
It also keeps track of where it has got to so that playback can be restarted (if the program is interrupted).
Playback resumes with the start of the file which was playing at the time of interruption.

B<server-name> specifies the name of the server (as advertised by the server).
File glob style wildcards can be included.

B<object-id> is the numeric object id number of an item or container (playlist, album or directory) on the content server. dlna-mediaserver-walk displays these.

B<list-name> is the name of a container to search for. The program walks the tree looking for a container with a name which matches the specified list-name.
File glob style wildcards can be included. The first matching container is used.

B<list-path> specifies a container path, from the root, seperated by slashes '/'. File glob style wildcards can be included in each component,
in which case the first match is used.

=head1 EXAMPLES

=over 8

=item B<dlna-playlist-play "HDR-2000T*" 35>

Play the content in object 35 from a Humax HDR-2000T server.

=item B<dlna-playlist-play --playlist --output remote-playlist.m3u Gerbera my-playlist.m3u>

Create a playlist which can be used to play all the content in a playlist called 'my-playlist.m3u' stored on a Gerbera server.
The generated playlist includes URLs so it can be played on a device not on the same LAN as the media server.

=item B<dlna-playlist-play --execute vlc Gerbera "/Audio/Albums/Best of Status Quo">

Play the specified album using vlc to play each track and keeping a record of how far it has got so it can be resumed later.


=back

=cut

my $obj = Net::UPnP::ControlPoint->new();

my @dev_list = $obj->search(st =>'upnp:rootdevice', mx => 3);

my $devNum= 0;
my $mediaServer = Net::UPnP::AV::MediaServer->new();
foreach my $dev (@dev_list) {
    $devNum++;

    my $device_type = $dev->getdevicetype();
    if  ($device_type ne 'urn:schemas-upnp-org:device:MediaServer:1') {
	next;
    }
    #print "[$devNum] : " . $dev->getfriendlyname() . "\n";
    my $condir_service = $dev->getservicebyname('urn:schemas-upnp-org:service:ContentDirectory:1');
    unless (defined($condir_service)) {
	next;
    }
    if ($serverName) {
	next unless match_glob($serverName, $dev->getfriendlyname());
    } else {
	msgInfo "${dryRunText}Playing server ", $dev->getfriendlyname(), "...";
    }
    
    $mediaServer->setdevice($dev);
    
    last;
}

my @content_list = $mediaServer->getcontentlist(ObjectID => 36 );

if (not defined($listObjId)) {
    # Walk tree to find object
    ...
}
    
play_tree ( $mediaServer, $listObjId );

if ($resuming) {
    # Still resuming -- resume point must be out of date
    msgError "Resume point not found. Invoke without --resume"
}

# Mark the playback completed
save_id('') if $saving;

sub play_tree {
    my ($mediaServer, $id) = @_;

    msgProgress "Playing container $id";

    my @content_list = $mediaServer->getcontentlist(ObjectID => $id );

    foreach my $content (@content_list) {
	if ($content->isitem()) {
	    play_content($mediaServer,
			 id => $content->getid(),
			 url => $content->geturl(),
			 title => $content->gettitle(),
		);
	} else {
	    play_tree($mediaServer, $content->getid());
	    print $logfh "${dryRunText}".DateTime->now." finished playing album ".$content->gettitle()." (".$content->getid().")\n" if $logging;
	}	    
    }
    
}

sub play_content {
    my ($mediaServer, %details) = @_;

    if ($resuming) {
	if ($resumeAt != $details{id}) {
	    msgProgress "Resume: skipping ".$details{url}." (".$details{id}.")";
	    return;
	} else {
	    msgProgress "Resuming at ".$details{id};
	    $resuming = 0;
	}
    }

    if ($execute) {
	msgProgress "${dryRunText}${execute} ".$details{url}." (".$details{id}.")";
	if (! $output) {
	    save_id ($details{id}) if $saving;
	    system($execute." ".$details{url}) unless $dryRun;
	} else {
	    print $outputfh $execute." ".$details{url}."\n" unless $dryRun;
	}
    }

    if ($playlist) {
	msgProgress "${dryRunText}".$details{url}." (".$details{id}.")";
	print { $output ? $outputfh : *STDOUT } $details{url}."\n" unless $dryRun;
    }

    if ($extendedPlaylist) {
	msgProgress "${dryRunText}".$details{url}." (".$details{id}.")";

	print { $output ? $outputfh : *STDOUT } "#DPPEP-Item: ".encode_json(\%details)."\n" unless $dryRun;
	print { $output ? $outputfh : *STDOUT } $details{url}."\n" unless $dryRun;
    }

    print $logfh "${dryRunText}".DateTime->now." finished playing ".$details{title}." (".$details{id}.")\n" if $logging;
}

sub save_id {
    my ($id) = @_;
    open(my $savefh, "> :encoding(UTF-8)", $saveFileName)
	|| die "$0: can't open save file $saveFileName: $!";
    print $savefh $id;
    close $savefh;
}
